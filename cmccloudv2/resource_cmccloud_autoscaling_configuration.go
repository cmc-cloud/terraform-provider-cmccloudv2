package cmccloudv2

import (
	"fmt"
	"time"

	// "strconv"

	"github.com/cmc-cloud/gocmcapiv2"
	"github.com/hashicorp/terraform-plugin-sdk/helper/schema"
)

type AutoGenerated struct {
	BootIndex           int    `json:"boot_index"`
	DeleteOnTermination bool   `json:"delete_on_termination"`
	DestinationType     string `json:"destination_type"`
	SourceType          string `json:"source_type"`
	UUID                string `json:"uuid"`
	VolumeSize          int    `json:"volume_size"`
	VolumeType          string `json:"volume_type"`
}

func resourceAutoScalingConfiguration() *schema.Resource {
	return &schema.Resource{
		Create: resourceAutoScalingConfigurationCreate,
		Read:   resourceAutoScalingConfigurationRead,
		Update: resourceAutoScalingConfigurationUpdate,
		Delete: resourceAutoScalingConfigurationDelete,
		Importer: &schema.ResourceImporter{
			State: resourceAutoScalingConfigurationImport,
		},
		Timeouts: &schema.ResourceTimeout{
			Delete: schema.DefaultTimeout(5 * time.Minute),
			Create: schema.DefaultTimeout(20 * time.Minute),
		},
		SchemaVersion: 1,
		Schema:        autoscalingConfigurationSchema(),
	}
}

func resourceAutoScalingConfigurationCreate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*CombinedConfig).goCMCClient()
	datas := map[string]interface{}{
		"name":                 d.Get("name").(string),
		"source_type":          d.Get("source_type").(string),
		"source_id":            d.Get("source_id").(string),
		"flavor_id":            d.Get("flavor_id").(string),
		"subnet_ids":           d.Get("subnet_ids").([]interface{}),
		"use_eip":              d.Get("use_eip").(bool),
		"domestic_bandwidth":   d.Get("domestic_bandwidth").(int),
		"inter_bandwidth":      d.Get("inter_bandwidth").(int),
		"volumes":              d.Get("volumes").([]interface{}),
		"security_group_names": d.Get("security_group_names").(*schema.Set).List(),
		"key_name":             d.Get("key_name").(string),
		"user_data":            d.Get("user_data").(string),
		"password":             d.Get("password").(string),
		"ecs_group_id":         d.Get("ecs_group_id").(string),
	}
	res, err := client.AutoScalingConfiguration.Create(datas)

	if err != nil {
		return fmt.Errorf("Error creating configuration: %v", err.Error())
	}
	d.SetId(res.ID)
	return resourceAutoScalingConfigurationRead(d, meta)
}

func resourceAutoScalingConfigurationRead(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*CombinedConfig).goCMCClient()
	configuration, err := client.AutoScalingConfiguration.Get(d.Id())
	if err != nil {
		return fmt.Errorf("Error retrieving configuration %s: %v", d.Id(), err)
	}
	_ = d.Set("name", configuration.Name)
	_ = d.Set("flavor_id", configuration.Spec.Properties.FlavorID)
	_ = d.Set("subnet_ids", convertConfigNetworks(configuration.Spec.Properties.Networks))
	_ = d.Set("use_eip", configuration.Spec.Properties.UseEip)
	_ = d.Set("domestic_bandwidth", configuration.Spec.Properties.DomesticBandwidthMbps)
	_ = d.Set("inter_bandwidth", configuration.Spec.Properties.InterBandwidthMbps)
	_ = d.Set("volumes", convertConfigVolumes(configuration.Spec.Properties.Volumes))
	_ = d.Set("security_group_names", convertConfigSecurityGroups(configuration.Spec.Properties.Networks))
	_ = d.Set("ecs_group_id", configuration.Spec.Properties.SchedulerHints.Group)

	// if (configuration.KeyName != nil && configuration.KeyName != "") {
	// 	_ = d.Set("key_name", configuration.KeyName)
	// }
	return nil
}

func convertConfigSecurityGroups(networks []gocmcapiv2.AutoScalingConfigurationNetwork) []string {
	if len(networks) > 0 {
		network := networks[0]
		return network.SecurityGroups
	}
	return []string{}
}
func convertConfigNetworks(networks []gocmcapiv2.AutoScalingConfigurationNetwork) []interface{} {
	result := make([]interface{}, len(networks))
	for i, network := range networks {
		result[i] = network.Subnet.ID
	}
	return result
}
func convertConfigVolumes(volumes []gocmcapiv2.AutoScalingConfigurationVolume) []map[string]interface{} {
	result := make([]map[string]interface{}, len(volumes))
	for i, volume := range volumes {
		result[i] = map[string]interface{}{
			"type":                  volume.Type,
			"size":                  volume.Size,
			"delete_on_termination": volume.DeleteOnTermination,
		}
	}
	return result
}
func resourceAutoScalingConfigurationUpdate(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*CombinedConfig).goCMCClient()
	id := d.Id()

	if d.HasChange("name") {
		old, new := d.GetChange("name")
		_, err := client.AutoScalingConfiguration.Update(id, map[string]interface{}{"name": d.Get("name").(string)})
		if err != nil {
			return fmt.Errorf("Error when rename autoscale configuration [%s] from `%s` to `%s`: %v", id, old, new, err)
		}
	}
	return resourceAutoScalingConfigurationRead(d, meta)
}

func resourceAutoScalingConfigurationDelete(d *schema.ResourceData, meta interface{}) error {
	client := meta.(*CombinedConfig).goCMCClient()
	_, err := client.AutoScalingConfiguration.Delete(d.Id())

	if err != nil {
		return fmt.Errorf("Error delete autoscale configuration: %v", err)
	}
	_, err = waitUntilAutoScalingConfigurationDeleted(d, meta)
	if err != nil {
		return fmt.Errorf("Error delete autoscale configuration: %v", err)
	}
	return nil
}

func resourceAutoScalingConfigurationImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	err := resourceAutoScalingConfigurationRead(d, meta)
	return []*schema.ResourceData{d}, err
}

func waitUntilAutoScalingConfigurationDeleted(d *schema.ResourceData, meta interface{}) (interface{}, error) {
	return waitUntilResourceDeleted(d, meta, WaitConf{
		Delay:      3 * time.Second,
		MinTimeout: 10 * time.Second,
	}, func(id string) (any, error) {
		return getClient(meta).AutoScalingConfiguration.Get(id)
	})
}
